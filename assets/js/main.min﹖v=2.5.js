"serviceWorker" in navigator && navigator.serviceWorker.register("/sw.js"); const scroller = { target: document.querySelector(".scroll-container"), ease: .05, endY: 0, y: 0, resizeRequest: 1, scrollRequest: 0, _on: !1, update: () => { if (scroller._on) { var e = scroller.resizeRequest > 0; if (e) { var t = scroller.target.clientHeight; document.body.style.height = t + "px", sc.maxTop = t, scroller.resizeRequest = 0 } var s = document.body.scrollTop || window.pageYOffset || document.documentElement.scrollTop; scroller.endY = s, scroller.y += (s - scroller.y) * scroller.ease, (Math.abs(s - scroller.y) < .05 || e) && (scroller.y = s, scroller.scrollRequest = 0), TweenMax.set(scroller.target, { y: -scroller.y, onUpdate: function () { sc.updateScroll(-this.vars.y) } }), requestId = scroller.scrollRequest > 0 ? requestAnimationFrame(scroller.update) : null } }, on: () => { scroller._on || (scroller._on = !0, document.body.className = "assist-scroll", scroller.resizeRequest = 1, requestId = requestAnimationFrame(scroller.update)) }, off: () => { scroller._on && (scroller._on = !1, TweenMax.killTweensOf(scroller.target), document.body.className = "", document.body.style.height = "", scroller.target.style.transform = "") } }; var requestId = null; const sc = { _top: document.body.scrollTop || window.pageYOffset || document.documentElement.scrollTop, top: document.body.scrollTop || window.pageYOffset || document.documentElement.scrollTop, maxTop: document.documentElement.scrollHeight - (window.innerHeight || document.documentElement.clientHeight), delta: 0, _width: 0, _height: 0, width: window.innerWidth || document.documentElement.clientWidth, height: window.innerHeight || document.documentElement.clientHeight, updates: {}, _update_id: 0, addUpdate: e => (sc.updates[++sc._update_id] = e, sc._update_id), deleteUpdate: e => { delete sc.updates[e] }, updateScroll: (e = document.body.scrollTop || window.pageYOffset || document.documentElement.scrollTop) => { sc._top = sc.top, sc.top = e, sc.delta = sc.top - sc._top, Math.abs(sc.delta) > 200 && (sc.delta = 0); for (const e in sc.updates) sc.updates.hasOwnProperty(e) && "function" == typeof sc.updates[e] && sc.updates[e]("scroll") }, update: (e = "resize") => { if (scroller._on && (scroller.scrollRequest++, requestId || (requestId = requestAnimationFrame(scroller.update))), "scroll" === e) { if (scroller._on) return; sc.updateScroll() } else sc._width = sc.width, sc._height = sc.height, sc.width = window.innerWidth || document.documentElement.clientWidth, sc.height = window.innerHeight || document.documentElement.clientHeight, scroller._on ? scroller.resizeRequest = 1 : sc.maxTop = document.documentElement.scrollHeight - sc.height, sc.width < 1024 ? scroller.off() : scroller.on(); for (const t in sc.updates) sc.updates.hasOwnProperty(t) && "function" == typeof sc.updates[t] && sc.updates[t](e) }, lerp: (e, t, s) => (1 - s) * e + s * t, _webp: void 0, webp: () => { if (void 0 === sc._webp) { sc._webp = !1; const e = document.createElement("canvas"); e.getContext && e.getContext("2d") && (sc._webp = 0 == e.toDataURL("image/webp").indexOf("data:image/webp")) } return sc._webp }, loadScript(e, t) { var s = document.createElement("script"); s.type = "text/javascript", s.readyState ? s.onreadystatechange = function () { "loaded" != s.readyState && "complete" != s.readyState || (s.onreadystatechange = null, t()) } : s.onload = function () { t() }, s.src = e, document.getElementsByTagName("head")[0].appendChild(s) } }; window.onload = () => { }; class Cursor { constructor() { this.showed = !1, this.size = 50, this.border = 2, this.cursor = document.createElement("DIV"), this.cursor.classList.add("cursor"), document.body.appendChild(this.cursor), this.cursor_images = document.createElement("DIV"), this.cursor_images.classList.add("cursor__images"), this.cursor.appendChild(this.cursor_images), this.cursor_in = document.createElement("DIV"), this.cursor.appendChild(this.cursor_in), this.cursor_point = document.createElement("DIV"), document.body.appendChild(this.cursor_point), this.cursor.style.pointerEvents = this.cursor_in.style.pointerEvents = this.cursor_point.style.pointerEvents = "none", this.cursor.style.zIndex = this.cursor_in.style.zIndex = this.cursor_point.style.zIndex = "10000", this.cursor.style.position = this.cursor_point.style.position = "fixed", this.cursor_in.style.position = "absolute", this.cursor.style.top = this.cursor_point.style.top = 0, this.cursor_in.style.bottom = 0, this.cursor.style.left = this.cursor_in.style.lefth = this.cursor_point.style.left = 0, this.cursor.style.border = "0 solid rgba(255,255,255,0.4)", this.cursor_point.style.border = "0 solid rgba(255,255,255,1)", this.cursor.style.opacity = this.cursor_point.style.opacity = 0, this.cursor_in.style.background = "linear-gradient(135deg, #2C7592, #960096)", this.cursor_in.style.width = "100%", this.cursor.style.width = this.size, this.cursor.style.height = this.size, this.cursor.style.transform = "translate(" + (sc.width / 2 - this.size / 2) + "px, " + (sc.height / 2 - this.size / 2) + "px)", this.cursor_point.style.transform = "translate(" + (sc.width / 2 - 1) + "px, " + (sc.height / 2 - 1) + "px)"; const e = sc.webp() ? "webp" : "jpg"; this.images_loading = !1, this.images = [{}, { src: "/assets/img/cursor/1." + e, type: "img", loaded: !1 }, { src: "/assets/img/cursor/2." + e, type: "img", loaded: !1 }, { src: "/assets/img/cursor/3.mp4", type: "video", loaded: !1 }, { src: "/assets/img/cursor/4." + e, type: "img", loaded: !1 }, { src: "/assets/img/cursor/5." + e, type: "img", loaded: !1 }, { src: "/assets/img/cursor/6." + e, type: "img", loaded: !1 }, { src: "/assets/img/cursor/7." + e, type: "img", loaded: !1 }, { src: "/assets/img/cursor/8." + e, type: "img", loaded: !1 }, { src: "/assets/img/cursor/9.mp4", type: "video", loaded: !1 }] } init() { this.onMouseEnterFn = e => this.show(e), this.onMouseMoveFn = e => this.move(e), this.onMouseLeaveFn = e => this.hide(e), this.onMouseOverFn = e => this.over(e), this.created = !0, this.create() } create() { this.created = !0, document.body.addEventListener("mouseenter", this.onMouseEnterFn, !1), document.body.addEventListener("mousemove", this.onMouseMoveFn, !1), document.body.addEventListener("mouseleave", this.onMouseLeaveFn, !1), document.body.addEventListener("mouseover", this.onMouseOverFn, !1), this.show() } destroy() { this.created = !1, document.body.removeEventListener("mouseenter", this.onMouseEnterFn), document.body.removeEventListener("mousemove", this.onMouseMoveFn), document.body.removeEventListener("mouseleave", this.onMouseLeaveFn), document.body.removeEventListener("mouseover", this.onMouseOverFn), this.hide() } over(e) { const t = "A" === e.target.tagName || "dsgn__container dsgn__container--video" === e.target.className || "pnlm-container" === e.target.className || "pnlm-dragfix" === e.target.className; this.size = t ? 0 : 50 } loadImage(e) { if (!e.loaded) { var t = () => { e.loaded = !0 }; e.el = document.createElement(e.type), "video" === e.type ? (e.el.loop = !0, e.el.muted = !0, e.el.onloadeddata = t) : e.el.onload = t, e.el.src = e.src, this.cursor_images.appendChild(e.el) } } loadImages() { this.images_loading || (this.images_loading = !0, this.images.forEach(e => { e.src && this.loadImage(e) })) } setImage(e) { this.images[e] && this.images[e].el.classList.contains("show-image") && !this.images[e].el.classList.contains("hide-image") || (this.cursor.querySelectorAll(".show-image").forEach(e => { e.classList.add("hide-image"), "video" === e.type && e.pause() }), this.images[e] && (this.images[e].el.style.transition = "none", this.images[e].el.classList.remove("show-image", "hide-image"), setTimeout(() => { this.images[e].el.style.transition = "", this.images[e].el.classList.add("show-image"), "video" === this.images[e].type && this.images[e].el.play() }, 10))) } show(e) { this.showed = !0, TweenMax.to(this.cursor, 1, { width: this.size, height: this.size, borderTopWidth: 1, borderRightWidth: 1, borderBottomWidth: 1, borderLeftWidth: 1, opacity: 1, ease: Power2.easeOut }), TweenMax.to(this.cursor_point, .5, { borderTopWidth: 2, borderRightWidth: 2, borderBottomWidth: 2, borderLeftWidth: 2, opacity: 1, ease: Power2.easeOut }) } move(e) { this.showed || this.show(e), TweenMax.to(this.cursor, 1, { x: e.x - this.size / 2, y: e.y - this.size / 2, width: this.size, height: this.size, opacity: this.size / 50, ease: Power2.easeOut }), TweenMax.to(this.cursor_point, .5, { x: e.x - 2, y: e.y - 2, opacity: 50 === this.size, ease: Power2.easeOut }) } hide(e) { this.showed = !1, TweenMax.to(this.cursor, 1, { width: 0, height: 0, borderTopWidth: 0, borderRightWidth: 0, borderBottomWidth: 0, borderLeftWidth: 0, opacity: 0, ease: Power2.easeOut }), TweenMax.to(this.cursor_point, .5, { borderTopWidth: 0, borderRightWidth: 0, borderBottomWidth: 0, borderLeftWidth: 0, opacity: 0, ease: Power2.easeOut }) } loaded(e = 1) { this.per = 100 * e, this.loader = TweenMax.to(this.cursor_in, 1, { height: this.per + "%", onComplete: function () { "100%" === this.vars.height && cursor.onLoaded() } }) } onLoaded() { this.cursor_in.style.bottom = "", this.cursor_in.style.top = 0; const e = document.getElementById("loader"); TweenMax.to(e, 2, { height: 0, borderBottomLeftRadius: "50%", borderBottomRightRadius: "50%", ease: Power4.easeInOut, onComplete: () => { this.update("resize"), sc.addUpdate(e => { this.update(e) }) } }), TweenMax.to(this.cursor_in, 2, { height: 0, borderBottomLeftRadius: "50%", borderBottomRightRadius: "50%", ease: Power4.easeInOut }), sc.loaded() } update(e) { if ("resize" === e) if (sc.width < 1024) { if (!this.created) return; this.destroy() } else this.created || this.create() } } class Cube { constructor() { this.materials = {}, this.mixers = [], this.head = document.getElementById("head"), this.first_update = !0, this.height = 1.4 * sc.height, this.top = -.2 * sc.height + "px" } init() { this.initScene(), this.initCamera(), this.initRenderer(), this.initBloomGlow(), this.initLights(), this.load(), sc.addUpdate(e => { this.update(e) }) } initScene() { this.scene = new THREE.Scene } initCamera() { this.camera = new THREE.PerspectiveCamera(45, sc.width / this.height, 1, 1e3), this.camera.position.set(0, .5, 5) } initRenderer() { this.renderer = new THREE.WebGLRenderer({ alpha: !0, antialias: !0 }), this.renderer.setPixelRatio(window.devicePixelRatio), this.renderer.setSize(sc.width, this.height), this.renderer.physicallyCorrectLights = !0, this.renderer.outputEncoding = THREE.sRGBEncoding, this.renderer.toneMapping = THREE.LinearToneMapping, this.renderer.toneMappingExposure = Math.pow(.94, 5), this.renderer.shadowMap.enabled = !0, this.renderer.shadowMap.type = THREE.PCFShadowMap, this.renderer.domElement.id = "cube", this.renderer.domElement.style.position = "fixed", this.renderer.domElement.style.top = 0, this.renderer.domElement.style.left = 0, document.body.appendChild(this.renderer.domElement) } initBloomGlow() { this.bloomLayer = new THREE.Layers, this.bloomLayer.set(1); var e = new THREE.RenderPass(this.scene, this.camera); new THREE.ShaderPass(THREE.CopyShader).renderToScreen = !0; var t = new THREE.UnrealBloomPass(new THREE.Vector2(sc.width, this.height), 2, 1, 0); this.bloomComposer = new THREE.EffectComposer(this.renderer), this.bloomComposer.renderToScreen = !1, this.bloomComposer.addPass(e), this.bloomComposer.addPass(t); var s = new THREE.ShaderPass(new THREE.ShaderMaterial({ uniforms: { baseTexture: { value: null }, bloomTexture: { value: this.bloomComposer.renderTarget2.texture } }, vertexShader: document.getElementById("vertexshader").textContent, fragmentShader: document.getElementById("fragmentshader").textContent, defines: {} }), "baseTexture"); s.needsSwap = !0, this.finalComposer = new THREE.EffectComposer(this.renderer), this.finalComposer.addPass(e), this.finalComposer.addPass(s), this.darkMaterial = new THREE.MeshBasicMaterial({ color: "black" }) } initControlls() { this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement), this.controls.rotateSpeed = .3, this.controls.zoomSpeed = .9, this.controls.minDistance = 5, this.controls.maxDistance = 5, this.controls.enableDamping = !0, this.controls.dampingFactor = .05, this.controls.target.set(0, 1.2, 0), this.controls.dispose(), this.controls.update(), this.onDocumentMouseMove = e => { var t = { clientX: (e.clientX - sc.width / 2) / 5, clientY: (e.clientY - this.height / 2) / 5 }; this.controls.handleMouseMoveRotate(t) }, document.addEventListener("mousemove", e => { this.onDocumentMouseMove(e) }, !1) } initLights() { var e = new THREE.DirectionalLight(16777215, 1e3); e.position.set(-10, 10, 0), e.target.position.set(-5, 0, 0), this.scene.add(e), this.scene.add(e.target) } load() { var e = new THREE.GLTFLoader; e.crossOrigin = !0, e.load("/assets/js/cube3d/cube_v1.4_backup3.1.glb", e => { var t = e.scene; t.children[13].material = new THREE.MeshBasicMaterial({ color: 2062867 }), t.children[13].layers.enable(1), t.remove(t.getObjectByName(t.children[5].name)), t.remove(t.getObjectByName(t.children[4].name)), t.remove(t.getObjectByName(t.children[0].name)), this.scene.add(t); for (var s = 0, i = e.animations.length; s < i; s++) { var o = new THREE.AnimationMixer(t); this.mixers.push(o), o.clipAction(e.animations[s]).play() } }, e => { const t = e.total ? e.total : 78252; cursor.loaded(e.loaded / t), e.loaded === t && (this.initControlls(), this.render()) }, e => { console.log("An error happened") }) } darkenNonBloomed(e) { e.isMesh && !1 === this.bloomLayer.test(e.layers) && (this.materials[e.uuid] = e.material, e.material = this.darkMaterial) } restoreMaterial(e) { this.materials[e.uuid] && (e.material = this.materials[e.uuid], delete this.materials[e.uuid]) } render() { if (requestAnimationFrame(() => { this.render() }), this.off_screen) return; this.scene.traverse(e => { this.darkenNonBloomed(e) }), this.bloomComposer.render(), this.scene.traverse(e => { this.restoreMaterial(e) }), this.finalComposer.render(); var e = sc.top / (.66667 * this.head.clientHeight); e < 0 && (e = 0), e > 1.4999 && (e = 1.4999); const t = sc.width < 1024 ? .5 : 0; var s = t && e < .1 ? e * t * 10 : t; e > .5 && (s = 2 * (e - .5) + t), s < 2 && (this.controls.target.set(0, 1.2 - 3 * s, 0), this.controls.update()); for (var i = 0, o = this.mixers.length; i < o; ++i)this.mixers[i].setTime(e) } update(e) { "resize" === e ? sc.width < 1024 && sc.width === sc._width && sc.height !== sc._height || (sc.width < 1024 ? (this.height = 1.4 * sc.height, this.camera.fov = 100) : (this.height = sc.height, this.camera.fov = 45), this.camera.aspect = sc.width / this.height, this.camera.updateProjectionMatrix(), this.renderer.setSize(sc.width, this.height), this.bloomComposer.setSize(sc.width, this.height), this.finalComposer.setSize(sc.width, this.height)) : this.off_screen = sc.top > this.head.clientHeight } } class UpdateOnScroll { constructor(e) { this.el = e, this._visible = !1, this.around = sc.height / 2, this.id = sc.addUpdate(e => this._update(e)), this._update("resize"), "VIDEO" === this.el.tagName && 4 !== this.el.readyState && (this.el.load(), this.el.onloadeddata = () => { this.resizeUpdate() }), "IMG" !== this.el.tagName || this.el.complete && 0 !== this.el.naturalWidth || (this.el.onload = () => { this.resizeUpdate() }) } destroy() { sc.deleteUpdate(this.id), this.hidden(), this.hide() } offset() { if (!this.el.getClientRects().length) return { top: 0, left: 0 }; let e = this.el.getBoundingClientRect(), t = this.el.ownerDocument.defaultView; return { top: e.top + t.pageYOffset, left: e.left + t.pageXOffset } } resizeUpdate() { this.width = this.el.clientWidth, this.height = this.el.clientHeight; let e = this.offset(); this.top = e.top, this.left = e.left } _update(e) { if (("resize" === e || 0 === this.top && 0 === this.left) && this.resizeUpdate(), this.update(e), sc.top + sc.height > this.top - this.around && sc.top < this.top + this.height + this.around) return this._visible || (this._visible = !0, this.show()), void this.visible(); this._visible && (this._visible = !1, this.hide()), this.hidden() } visible() { } hidden() { } show() { } hide() { } update(e) { } } class ShowOnScroll extends UpdateOnScroll { constructor(e) { super(e) } _update(e) { "resize" === e && this.resizeUpdate(), sc.top + sc.height > this.top + this.height / 2 && this.show(), this.update(e) } } class LineHover { constructor(e) { this.filterId = "#filter-5", this.line = e, this.el = this.line.parentNode, this.initEvents(), this.primitiveValues = { scale: 0 }, this.feDisplacementMap = document.querySelector(this.filterId + " > feDisplacementMap"), this.createTimeline(), this.tl.eventCallback("onUpdate", () => this.feDisplacementMap.scale.baseVal = this.primitiveValues.scale), this.tl.to(this.primitiveValues, 1, { duration: 1, ease: "Expo.easeOut", startAt: { scale: 80 }, scale: 0 }) } initEvents() { this.onMouseEnterFn = () => this.tl.restart(), this.onMouseLeaveFn = () => this.tl.progress(1).kill(), this.el.addEventListener("mouseenter", this.onMouseEnterFn, !1), this.el.addEventListener("mouseleave", this.onMouseLeaveFn, !1) } createTimeline() { this.tl = new TimelineMax({ paused: !0, onStart: () => { this.line.style.filter = "url(" + this.filterId }, onComplete: () => { this.line.style.filter = "none" } }) } } class ArrowHover { constructor(e) { this.arrow = e, this.el = this.arrow.parentNode, -1 != this.el.parentNode.className.indexOf("proud-item") && (this.el = this.el.parentNode), this.initEvents() } initEvents() { this.el.addEventListener("mouseenter", () => { TweenMax.fromTo(this.arrow, .375, { opacity: 1, yPercent: 0, xPercent: 0 }, { opacity: 0, yPercent: -120, xPercent: 120, ease: Power3.easeIn }), TweenMax.fromTo(this.arrow, .375, { opacity: 0, yPercent: 120, xPercent: -120 }, { delay: .375, opacity: 1, yPercent: -0, xPercent: -0, ease: Power3.easeOut }) }, !1) } } class Tags extends UpdateOnScroll { constructor(e) { super(e), this.lines = [this.el.children[0].children[0].children[0], this.el.children[1].children[0].children[0], this.el.children[2].children[0].children[0]], this.words = this.el.querySelectorAll("strong, span"), this.initHover() } initHover() { this.onMouseEnterFn = e => { cursor.setImage(e.target.getAttribute("data-img-id")) }, this.onMouseLeaveFn = e => { cursor.setImage(!1) }, this.words.forEach(e => { e.addEventListener("mouseenter", this.onMouseEnterFn, !1) }), this.el.addEventListener("mouseleave", this.onMouseLeaveFn, !1) } show() { this.el.classList.add("block-tags--show", "block-tags--visible"), cursor.loadImages() } visible() { var e = (sc.top + sc.height / 2 - (this.top + this.height / 2)) / 2; this.lines && (TweenMax.to(this.lines[0], 1, { x: -e }), TweenMax.to(this.lines[1], 1, { x: e }), TweenMax.to(this.lines[2], 1, { x: -e })) } hide() { this.el.classList.remove("block-tags--visible"), cursor.setImage(!1) } } class TitleAnim extends ShowOnScroll { constructor(e) { super(e), this.inner_origin = this.el.innerHTML, this.lines = this.inner_origin.split("<br>"); for (var t = "", s = 0, i = this.lines.length; s < i; s++)t += '<span class="animtitle__line"><span>' + this.lines[s] + "</span></span>"; this.el.innerHTML = t, this.el.style.opacity = 1 } show() { this.destroy(), this.el.classList.add("animtitle--show"), setTimeout(() => { this.el.innerHTML = this.inner_origin, this.el.classList.remove("animtitle--show") }, 1500) } } class ShowBlock extends ShowOnScroll { constructor(e) { super(e), this.classes = this.el.getAttribute("class").split(" "), this.class = this.classes[0] } show() { this.el.classList.add(this.class + "--show"), this.destroy() } } class Arrows extends UpdateOnScroll { constructor(e) { if (super(e), this.arrows = this.el.children, !this.arrows) return; let t = -sc.height; TweenMax.to(this.arrows[0], 1, { y: t / 4 }), TweenMax.to(this.arrows[1], 1, { y: t / 7 }), TweenMax.to(this.arrows[3], 1, { y: t / 7 }), TweenMax.to(this.arrows[4], 1, { y: t / 4 }) } visible() { let e = sc.top - this.top; e > 0 && (e = 0), this.arrows && (TweenMax.to(this.arrows[0], 1, { y: e / 4 }), TweenMax.to(this.arrows[1], 1, { y: e / 7 }), TweenMax.to(this.arrows[3], 1, { y: e / 7 }), TweenMax.to(this.arrows[4], 1, { y: e / 4 })) } } class ScrollShift extends UpdateOnScroll { constructor(e) { super(e), this.k = 3 } visible() { sc.width < 1024 || (this.percentage = sc.lerp(this.percentage || 0, sc.delta * this.k, .07), TweenMax.to(this.el, 1, { y: this.percentage })) } update() { sc.width < 1024 && this.el.setAttribute("style", "") } } class Play360 extends UpdateOnScroll { constructor(e) { super(e) } open(e) { sc.width < 1024 || (e.preventDefault(), "pano" === this.opts[1] ? (this.viewer.startAutoRotate(), this.viewer.on()) : this.video.play(), this.scale = .5, this.container.style.visibility = "visible", this.el.classList.add("icon--" + this.opts[1] + "-close"), this.d_img.showing(!1)) } close(e) { if (!(sc.width < 1024)) { if ("pano" === this.opts[1]) { if (e && "click" === e.type) return; void 0 !== this.viewer && (this.viewer.stopAutoRotate(), this.viewer.off()) } else this.video.pause(); this.scale = 1, this.container.style.visibility = "", this.el.classList.remove("icon--" + this.opts[1] + "-close"), TweenMax.to(this.el, 1, { scale: this.scale, ease: Power2.easeOut }), this.d_img.showing(!0) } } init() { this.initialize || (this.initialize = !0, this.scale = 1, this.dsgn = this.el.closest(".dsgn"), this.img = this.dsgn.querySelector("img"), this.link = this.dsgn.querySelector("a"), this.container = this.dsgn.querySelector(".dsgn__container"), this.d_img = new DImg(this.img), this.dsgn.addEventListener("mousemove", e => this.move(e), !1), this.dsgn.addEventListener("mouseleave", e => this.center(e), !1), this.folder = this.container.getAttribute("data-folder"), this.opts = this.folder.split("/").filter(Boolean), this.link.addEventListener("click", e => this.open(e)), this.container.addEventListener("click", e => this.close(e)), "pano" === this.opts[1] ? sc.loadScript("/assets/js/vendor/pannellum.js", () => { this.viewer = pannellum.viewer(this.container, { type: "cubemap", cubeMap: [this.folder + "back.jpg", this.folder + "left.jpg", this.folder + "front.jpg", this.folder + "right.jpg", this.folder + "top.jpg", this.folder + "bottom.jpg"], autoLoad: !0 }) }) : (this.video = document.createElement("video"), "" !== this.video.canPlayType("video/webm") ? this.video.src = this.container.getAttribute("data-folder") + "vid.webm" : "" !== this.video.canPlayType("video/mp4") && (this.video.src = this.container.getAttribute("data-folder") + "vid.mp4"), this.video.loop = !0, this.video.muted = !0, this.container.appendChild(this.video))) } move(e) { TweenMax.to(this.el, 1.7, { scale: this.scale, x: e.offsetX, y: e.offsetY, left: 0, top: 0, ease: Power2.easeOut }) } center(e) { TweenMax.to(this.el, 1.7, { scale: this.scale, x: 0, y: 0, left: "50%", top: "50%", ease: Power2.easeOut }) } hide() { this.close() } update() { sc.width >= 1024 && this.init() } } class DImg extends UpdateOnScroll { constructor(e) { super(e), this.is_video = "VIDEO" === this.el.tagName, this.is_dsgn = null !== this.el.closest(".dsgn"), this.src = this.el.src, -1 != this.src.indexOf("design/425") && (this.src = this.src.replace("design/425", "design")), sc.webp() && (this.src = this.src.replace(".jpg", ".webp")), this.is_video && (this.src = this.el.querySelector("source").src), this._hover = { k: 0 }, this._show = !0, pixi.onloadedpixi.push(() => { this.texture = PIXI.Texture.from(this.src), this.is_video && (this.texture.baseTexture.resource.source.muted = !0, this.texture.baseTexture.resource.source.loop = !0, this.texture.baseTexture.resource.source.playsinline = !0), this.mask = new PIXI.Sprite(PIXI.Texture.WHITE), this.sprite = PIXI.Sprite.from(this.texture), this.resizeUpdate() }) } show() { this.is_video && "visible" == this.el.style.visibility && this.el.play(), pixi.loaded && this.is_dsgn && (this.sprite.alpha = .7) } visible() { if ("visible" == this.el.style.visibility) return; if (!pixi.loaded) return; if (!this._show) return; const e = this.top - sc.top; this.sprite.width = this.width + this._hover.k, this.sprite.height = this.height + this._hover.k, this.sprite.x = this.left - this._hover.k / 2, this.sprite.y = e - this._hover.k / 2, this.mask.width = this.width - this._hover.k, this.mask.height = this.height - this._hover.k, this.mask.x = this.left + this._hover.k / 2, this.mask.y = e + this._hover.k / 2, this.sprite.mask = this.mask, pixi.container.addChild(this.mask), pixi.container.addChild(this.sprite) } hide() { this.is_video && "visible" == this.el.style.visibility && this.el.pause(), pixi.loaded && pixi.container.removeChild(this.sprite) } hover(e) { const t = e ? 40 : 0; TweenMax.to(this._hover, .5, { k: t, onUpdate: () => { this.visible() }, ease: Power3.easeOut }) } showing(e = !0) { this._show = e, e ? this.visible() : this.hide() } update(e) { "resize" === e && (sc.width < 1024 ? this.el.style.visibility = "visible" : this.el.style.visibility = "hidden") } } class Proud { constructor(e) { this.el = e, this.d_ = new DImg(this.el.querySelector("img, video")), this.initEvents() } initEvents() { this.onMouseEnterFn = () => this.enter(), this.onMouseLeaveFn = () => this.leave(), this.el.addEventListener("mouseenter", this.onMouseEnterFn, !1), this.el.addEventListener("mouseleave", this.onMouseLeaveFn, !1) } enter() { pixi.off || this.d_.hover(!0) } leave() { pixi.off || this.d_.hover(!1) } } class MobileTapHover { constructor(e) { this.el = e, this.video = this.el.querySelector("video"), this.video && this.video.play(), this.initEvents() } initEvents() { this.onTapFn = () => { this.touched = !0, this.el.classList.contains("hover") ? this.el.classList.remove("hover") : this.el.classList.add("hover") }, this.onMouseEnterFn = () => { this.touched ? this.touched = !1 : this.el.classList.add("hover") }, this.onMouseLeaveFn = () => { this.el.classList.remove("hover") }, this.el.addEventListener("touchstart", this.onTapFn, { passive: !0 }), this.el.addEventListener("mouseenter", this.onMouseEnterFn, !1), this.el.addEventListener("mouseleave", this.onMouseLeaveFn, !1) } } sc.loaded = () => { document.body.scrollTop = 0, document.documentElement.scrollTop = 0, sc._top = document.body.scrollTop || window.pageYOffset || document.documentElement.scrollTop, sc.top = document.body.scrollTop || window.pageYOffset || document.documentElement.scrollTop, document.body.style.height = "auto", document.body.style.overflow = "auto", TweenMax.set(scroller.target, { rotation: .001, force3D: !0 }), window.onresize = () => sc.update(), window.onscroll = () => sc.update("scroll"), document.querySelectorAll(".link__line:not(.link__line--tiny)").forEach(e => { new LineHover(e) }), document.querySelectorAll(".icon--link-arrow, .icon--link-arrow-top").forEach(e => { new ArrowHover(e) }), document.querySelector(".link").addEventListener("click", e => { e.preventDefault(); const t = document.getElementById(e.target.getAttribute("href").replace("#", "")).getBoundingClientRect().top + window.scrollY; TweenMax.to(window, 1, { scrollTo: { y: t, autoKill: !0 }, ease: Power3.easeOut }) }), document.querySelectorAll(".main h1, .main p:not(.not-shift), .main ul").forEach(e => { new ScrollShift(e) }), document.querySelectorAll(".animtitle").forEach(e => { new TitleAnim(e) }), document.querySelectorAll(".text-img__wrap").forEach(e => { new MobileTapHover(e) }), document.querySelectorAll(".d-img, .d-video").forEach(e => { new DImg(e) }), document.querySelectorAll(".icon--video, .icon--pano").forEach(e => { new Play360(e) }), document.querySelectorAll(".proud-item").forEach(e => { new Proud(e) }), document.querySelectorAll(".soc-links, .block-where").forEach(e => { new ShowBlock(e) }), new Tags(document.getElementById("blockTags")), new Arrows(document.getElementById("arrows")), sc.update() }; const cursor = new Cursor; cursor.init(); const cube = new Cube; cube.init(); const pixi = { onloadedpixi: [], off: !0, loaded: !1, load: () => { sc.width < 1024 || (sc.deleteUpdate(pixi.id), sc.loadScript("/assets/js/vendor/pixi.min.js", pixi.init)) }, init: () => { PIXI.utils.skipHello(), pixi.app = new PIXI.Application({ width: sc.width, height: sc.height, antialias: !0, transparent: !0, passiveWheel: !0 }), pixi.app.view.style.position = "fixed", pixi.app.view.style.top = "0", pixi.app.view.style.left = "0", pixi.canvas = document.body.appendChild(pixi.app.view), pixi.canvas.style.pointerEvents = "none", pixi.container = new PIXI.Container, pixi.container.filterArea = pixi.app.screen, pixi.app.stage.interactive = !0, pixi.app.stage.filterArea = pixi.app.screen, pixi.app.stage.addChild(pixi.container), pixi.distortion = 18, pixi.shader = document.querySelector("#shaderFrag").textContent, pixi.filter = new PIXI.Filter(null, pixi.shader), pixi.filter.uniforms.frequency = 100 / (1.05 * sc.width / 100), pixi.filter.uniforms.amplitude = 0, pixi.filter.uniforms.amplitudeY = .05, pixi.filter.uniforms.amplitudeX = 1, pixi.filter.uniforms.speed = 1, pixi.filter.uniforms.time = 2, pixi.filter.padding = 50, pixi.container.filters = [pixi.filter], pixi.onloadedpixi.forEach(e => { e() }), pixi.loaded = !0, pixi.update("resize"), sc.addUpdate(pixi.update) } }; pixi.id = sc.addUpdate(pixi.load), pixi.update = e => { if ("resize" === e) { if (sc.width < 1024) { if (pixi.off) return; return pixi.off = !0, pixi.app.view.style.display = "none", void pixi.app.renderer.plugins.interaction.destroy() } pixi.off && (pixi.off = !1, pixi.app.view.style.display = "block", pixi.app.renderer.plugins.interaction = new PIXI.interaction.InteractionManager(pixi.app.renderer)), pixi.app.renderer.resize(sc.width, sc.height), pixi.distortion = 100 / (1.05 * sc.width / 100), pixi.filter.uniforms.frequency = pixi.distortion } else { if (pixi.off) return; var t = sc.lerp(sc._top, sc.top, .065), s = (t = Math.floor(100 * t) / 100, sc.height, sc.width), i = +(sc.top - t) / s; TweenMax.to(pixi.filter.uniforms, 1, { amplitudeY: i * pixi.distortion / 42.5 * -3 }) } };